// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Problem {
  id             Int       @id
  frontendId     Int       
  title          String
  titleSlug      String
  difficulty     String
  acRate         Float
  topics TopicOnProblems[]
  topicTags Json?
  //A problemAttempt can have zero or more attempts
  problemAttempts ProblemAttempt[]

  @@unique([id,title])
}

model Topic {
  id             Int      @id @default(autoincrement())
  topicSlug      String   @unique
  topicName      String   @unique
  problems TopicOnProblems[]

  @@unique([id,topicSlug,topicName])
}


model TopicOnProblems {
  problem   Problem   @relation(fields:[problemId], references: [id])
  topic     Topic     @relation(fields:[topicId,topicName,topicSlug], references:[id, topicName, topicSlug])

  problemId Int

  topicId    Int
  topicSlug String
  topicName String
  @@id([problemId, topicId])
}

//Add more fields for User Table Later // PW, EMAIL
model User {
  id String @id @default(uuid())
  registeredAt DateTime @default(now())
  //A user can have zero or more problemAttempts
  problemAttempts ProblemAttemptDetails[]
}


//Each row within ProblemAttempt will be an attempt
model ProblemAttempt {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  backendId     Int       @default(autoincrement())

  problem        Problem @relation(fields:[problemId], references: [id])
  // A problem attempt must always have a problemId
  problemId      Int


  // ProblemAttemptDetails
  problemAttemptDetail ProblemAttemptDetails @relation(fields:[attemptDetailId], references: [id])
  //attemptDetailId must be unique
  attemptDetailId Int @unique

}

model ProblemAttemptDetails {
  id        Int      @id @default(autoincrement())

  //A problemAttemptDetails must have one user
  user      User     @relation(fields:[userId], references:[id])
  userId    String

  //ProblemAttemptDetails may have zero or one ProblemAttemptId
  ProblemAttempt ProblemAttempt?
  status    String
  createdAt DateTime @default(now())
}
